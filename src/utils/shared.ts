'use strict';

export enum UserStatus {
  SignedIn = 1,
  SignedOut = 2
}

export enum Languages {
  'Auto' = 0,
  'Pascal' = 1,
  'C' = 2,
  'C++14 (GCC 9)' = 28,
  'C++98' = 3,
  'C++11' = 4,
  'C++14' = 11,
  'C++17' = 12,
  'C++20' = 27,
  'Python 2' = 6,
  'Python 3' = 7,
  'Java 8' = 8,
  'Node.js LTS' = 9,
  'Go' = 14,
  'Ruby' = 13,
  'Rust' = 15,
  'PHP' = 16,
  'C# Mono' = 17,
  // 'VisualBasic' = 18,
  'Haskell' = 19,
  // 'Kotlin/Native' = 20,
  'Kotlin/JVM' = 21,
  'Scala' = 22,
  'Perl' = 23,
  'PyPy2' = 24,
  'PyPy3' = 25 // ,
  // '文言' = 26
}

export enum ProblemState {
  'Waiting' = 0,
  'Judging' = 1,
  'Compile Error' = 2,
  'OLE' = 3,
  'MLE' = 4,
  'TLE' = 5,
  'WA' = 6,
  'RE' = 7,
  'Accepted' = 12,
  'Unaccepted' = 14,
  'Hack Success' = 21,
  'Hack Failure' = 22,
  'Hack Skipped' = 23
}

export const fileExtention = {
  'pas': 'pascal',
  'pp': 'pascal',
  'lpr': 'pascal',
  'dpr': 'pascal',
  'c': 'c',
  'cpp': 'cpp',
  'cxx': 'cpp',
  'cc': 'cpp',
  'c++': 'cpp',
  'C': 'cpp',
  'py': 'python',
  'java': 'java',
  'js': 'nodejs',
  'go': 'go',
  'ruby': 'ruby',
  'rust': 'rust',
  'php': 'php',
  'cs': 'c#',
  'vb': 'vb',
  'vbs': 'vb',
  'hs': 'haskell',
  'kt': 'kotlin',
  'scala': 'scala',
  'perl': 'perl',
  'wy': 'wy'
}

export const languageList = {
  'pascal': ['Pascal'],
  'c': ['C'],
  'cpp': ['C++14 (GCC 9)', 'C++98', 'C++11', 'C++14', 'C++17', 'C++20'],
  'python': ['Python 2', 'Python 3', 'PyPy2', 'PyPy3'],
  'java': ['Java 8'],
  'nodejs': 'Node.js LTS',
  'go': ['Go'],
  'ruby': ['Ruby'],
  'rust': ['Rust'],
  'php': ['PHP'],
  'c#': ['C# Mono'],
  'vb': ['VisualBasic'],
  'haskell': ['Haskell'],
  'kotlin': [/* 'Kotlin/Native',*/ 'Kotlin/JVM'],
  'scala': ['Scala'],
  'perl': ['Perl'] // ,
  // 'wy': ['文言']
}

export const stateColor: string[] = ['rgb(20, 85, 143)', 'rgb(52, 152, 219)', 'rgb(250, 219, 20)', '#001277', '#001277', '#001277', '#fb6340', '#8e44ad', '', '', '', 'rgb(14, 29, 105)', 'rgb(82, 196, 26)', '', 'rgb(231, 76, 60)'];
export enum resultState {
  'OLE' = 3,
  'MLE' = 4,
  'TLE' = 5,
  'WA' = 6,
  'RE' = 7,
  'UKE' = 11,
  'AC' = 12
}
export enum colorStyle {
  'grey' = 'font-weight: bold; color: rgb(191,191,191);',
  'Gray' = 'font-weight: bold; color: rgb(191,191,191);',
  'blue' = 'font-weight: bold; color: rgb(52, 152, 219);',
  'Blue' = 'font-weight: bold; color: rgb(52, 152, 219);',
  'green' = 'font-weight: bold; color: rgb(82, 196, 26);',
  'Green' = 'font-weight: bold; color: rgb(82, 196, 26);',
  'orange' = 'font-weight: bold; color: rgb(243, 156, 17);',
  'Orange' = 'font-weight: bold; color: rgb(243, 156, 17);',
  'red' = 'font-weight: bold; color: rgb(254, 76, 97);',
  'Red' = 'font-weight: bold; color: rgb(254, 76, 97);',
  'purple' = 'font-weight: bold; color: rgb(157, 61, 207);',
  'Purple' = 'font-weight: bold; color: rgb(157, 61, 207);',
  'cheater' = 'font-weight: bold; color: rgb(173, 139, 0);',
  'Cheater' = 'font-weight: bold; color: rgb(173, 139, 0);'
}
export const contestType: string[] = ['', 'OI', 'ACM', '乐多', 'IOI', 'CodeForces (暂不可用)']
export const contestStyle: string[] = ['',
  'color: rgb(255, 255, 255); background: rgb(243, 156, 17);',// OI
  'color: rgb(255, 255, 255); background: rgb(157, 61, 207);',// ACM
  'color: rgb(255, 255, 255); background: rgb(255, 193, 22);',// 乐多
  'color: rgb(255, 255, 255); background: rgb(255, 193, 22);',// IOI
  'color: rgb(255, 255, 255); background: rgb(255, 193, 22);'// CodeForces (暂不可用)
]
export enum contestRated {
  'false' = 'display: none',
  'true' = 'color: rgb(255, 255, 255); background: rgb(82, 196, 26);'
}
export const contestVisibility: string[] = ['',
  '官方比赛',
  '团队公开赛',
  '团队内部赛',
  '个人公开赛',
  '个人邀请赛',
  '团队邀请赛'
]
export const contestVisibilityStyle: string[] = ['',
  'color: rgb(255, 255, 255); background: rgb(231, 76, 60);',
  'color: rgb(255, 255, 255); background: rgb(34, 112, 10);',
  'color: rgb(255, 255, 255); background: rgb(52, 152, 219);',
  'color: rgb(255, 255, 255); background: rgb(52, 152, 219);',
  'color: rgb(255, 255, 255); background: rgb(41, 73, 180);',
  'color: rgb(255, 255, 255); background: rgb(41, 73, 180);'
]

export enum difficultyID {
  '暂无评定' = 0,
  '入门' = 1,
  '普及-' = 2,
  '普及/提高-' = 3,
  '普及+/提高' = 4,
  '提高+/省选-' = 5,
  '省选/NOI-' = 6,
  'NOI/NOI+/CTSC' = 7
}
export const difficultyName=[
  '暂无评定',
  '入门',
  '普及-',
  '普及/提高-',
  '普及+/提高',
  '提高+/省选-',
  '省选/NOI-',
  'NOI/NOI+/CTSC'
]
// Reference: https://www.luogu.com.cn/paste/3ez54nl2
export const difficultyColor=[
  "#BFBFBF",
  "#FE4C61",
  "#F39C11",
  "#FFC116",
  "#52C41A",
  "#3498DB",
  "#3498DB",
  "#0E1D69"
]

export enum problemset {
  '洛谷题库' = 'P',
  '入门与面试' = 'B',
  'CodeForces' = 'CF',
  'SPOJ' = 'SP',
  'AtCoder' = 'AT',
  'UVA' = 'UVA'
}

export const tagsStatus = ['', '41,73,180);">模拟', '41,73,180);">字符串', '41,73,180);">动态规划,dp', '41,73,180);">搜索', '41,73,180);">数学', '41,73,180);">图论', '41,73,180);">贪心', '41,73,180);">计算几何', '41,73,180);">暴力数据结构', '41,73,180);">高精度', '41,73,180);">树形结构', '41,73,180);">递推', '41,73,180);">博弈论', '52,152,219);">1997', '52,152,219);">1998', '52,152,219);">1999', '52,152,219);">2000', '52,152,219);">2001', '52,152,219);">2002', '52,152,219);">2003', '52,152,219);">2004', '52,152,219);">2005', '52,152,219);">2006', '52,152,219);">2007', '52,152,219);">2008', '52,152,219);">2009', '52,152,219);">2010', '52,152,219);">2011', '52,152,219);">2012', '52,152,219);">2013', '52,152,219);">2014', '52,152,219);">2015', '52,152,219);">2016', '52,152,219);">2017', '52,152,219);">2018', '52,152,219);">2019', '52,152,219);">2020', '82,196,26);">重庆', '82,196,26);">四川', '82,196,26);">河南', '41,73,180);">莫队', '41,73,180);">线段树', '41,73,180);">倍增', '41,73,180);">线性结构', '41,73,180);">二分', '19,194,194);">USACO', '41,73,180);">并查集', '19,194,194);">各省省选', '41,73,180);">点分治', '41,73,180);">平衡树', '41,73,180);">二叉堆', '19,194,194);">WC/CTSC/集训队', '41,73,180);">树状数组', '41,73,180);">递归', '41,73,180);">树上启发式合并', '41,73,180);">单调队列', '19,194,194);">POI', '52,152,219);">2021', '52,152,219);">2022', '52,152,219);">2023', '52,152,219);">2024', '52,152,219);">2025', '41,73,180);">LGV引理', '41,73,180);">矩阵树定理', '41,73,180);">珂朵莉树,颜色段均摊,ODT', '41,73,180);">原根', '41,73,180);">三分', '41,73,180);">Kruskal重构树', '41,73,180);">多项式', '19,194,194);">福建省历届夏令营', '41,73,180);">矩阵运算', '41,73,180);">数论', '38,38,38);">算法', '38,38,38);">数据结构', '38,38,38);">来源', '38,38,38);">时间', '19,194,194);">NOI系列', '41,73,180);">离散化', '41,73,180);">网络流', '38,38,38);">高级数据结构', '19,194,194);">洛谷原创', '19,194,194);">NOIp普及组', '19,194,194);">NOIp提高组', '', '19,194,194);">APIO', '', '38,38,38);">地区', '82,196,26);">浙江', '82,196,26);">上海', '82,196,26);">福建', '82,196,26);">江苏', '82,196,26);">安徽', '82,196,26);">湖南', '82,196,26);">北京', '82,196,26);">河北', '82,196,26);">广东', '82,196,26);">山东', '82,196,26);">吉林', '19,194,194);">NOI导刊', '41,73,180);">cdq分治', '41,73,180);">后缀自动机,SAM', '19,194,194);">IOI', '243,156,17);">交互题', '243,156,17);">提交答案', '38,38,38);">特殊题目', '', '243,156,17);">SpecialJudge', '243,156,17);">O2优化', '', '41,73,180);">\ufeff基础算法', '41,73,180);">枚举,暴力', '41,73,180);">分治', '41,73,180);">排序', '38,38,38);">114', '19,194,194);">CCO', '19,194,194);">CCC', '19,194,194);">CEOI', '19,194,194);">eJOI', '38,38,38);">快速排序', '38,38,38);">堆排序', '38,38,38);">希尔排序', '41,73,180);">信息论', '38,38,38);">查找算法', '38,38,38);">顺序查找', '38,38,38);">二分查找', '41,73,180);">广度优先搜索,BFS', '41,73,180);">深度优先搜索,DFS', '41,73,180);">剪枝', '41,73,180);">记忆化搜索', '41,73,180);">启发式搜索', '41,73,180);">迭代加深搜索', '41,73,180);">启发式迭代加深搜索,IDA*', '41,73,180);">DancingLinks', '41,73,180);">爬山法', '41,73,180);">模拟退火', '41,73,180);">随机调整', '41,73,180);">遗传', '41,73,180);">动态规划初步', '41,73,180);">背包', '41,73,180);">环形dp', '41,73,180);">数位dp', '', '38,38,38);">多维状态', '41,73,180);">区间dp', '', '41,73,180);">动态规划优化', '41,73,180);">降低维度,降维', '41,73,180);">优先队列', '41,73,180);">矩阵加速,矩阵优化', '41,73,180);">斜率优化', '41,73,180);">状态压缩,状压', '41,73,180);">树形dp', '41,73,180);">凸完全单调性,凸单调', '41,73,180);">四边形不等式', '41,73,180);">图的建立,建图', '38,38,38);">邻接矩阵', '38,38,38);">邻接表', '41,73,180);">图遍历', '41,73,180);">拓扑排序', '41,73,180);">最短路', '82,196,26);">江西', '82,196,26);">贵州', '82,196,26);">广西', '82,196,26);">陕西', '41,73,180);">K短路', '41,73,180);">生成树', '82,196,26);">辽宁', '82,196,26);">云南', '38,38,38);">生成树的另类算法', '41,73,180);">次小生成树', '38,38,38);">特殊生成树', '41,73,180);">圈和块', '41,73,180);">最小环', '41,73,180);">负权环', '41,73,180);">连通块', '41,73,180);">2-SAT', '41,73,180);">欧拉公式', '', '41,73,180);">强连通分量,缩点', '41,73,180);">Tarjan', '41,73,180);">割点', '41,73,180);">欧拉回路', '38,38,38);">AOV', '38,38,38);">AOE', '41,73,180);">差分约束', '41,73,180);">仙人掌', '41,73,180);">二分图', '38,38,38);">匈牙利算法', '41,73,180);">一般图的最大匹配', '38,38,38);">Konig定理', '38,38,38);">带权二分图匹配', '41,73,180);">KM算法', '38,38,38);">稳定婚姻系统', '41,73,180);">最大流', '38,38,38);">Dinic', '38,38,38);">Sap', '41,73,180);">上下界网络流', '41,73,180);">最小割', '38,38,38);">闭合图', '38,38,38);">最小点权覆盖集', '38,38,38);">最大点权独立集', '41,73,180);">分数规划', '38,38,38);">最大密度子图', '41,73,180);">费用流', '38,38,38);">最短路增广费用流', '', '38,38,38);">最小费用可行流', '41,73,180);">树的遍历', '38,38,38);">树上距离', '38,38,38);">节点到根的距离', '41,73,180);">最近公共祖先,LCA', '38,38,38);">节点间的距离', '41,73,180);">树的直径', '41,73,180);">哈夫曼树', '41,73,180);">左偏树', '38,38,38);">斜堆', '38,38,38);">二项堆', '38,38,38);">AVL', '38,38,38);">Treap', '38,38,38);">SBT', '38,38,38);">Splay', '38,38,38);">静态排序树', '38,38,38);">替罪羊树', '38,38,38);">二维线段树', '38,38,38);">矩形树', '', '41,73,180);">动态树', '41,73,180);">树链剖分,树剖', '41,73,180);">Link-CutTree,LCT', '41,73,180);">树的应用', '41,73,180);">RMQ', '41,73,180);">树套树', '41,73,180);">主席树', '41,73,180);">可持久化', '41,73,180);">哈希,HASH', '38,38,38);">ELFhash', '38,38,38);">SDBM', '38,38,38);">BKDR', '41,73,180);">素数判断,质数,筛法', '41,73,180);">众数', '41,73,180);">最大公约数,gcd', '41,73,180);">扩展欧几里德,扩欧', '41,73,180);">不定方程', '41,73,180);">进制', '41,73,180);">集合论', '41,73,180);">群论', '41,73,180);">置换', '41,73,180);">Polya原理', '41,73,180);">虚树', '41,73,180);">中国剩余定理,CRT', '41,73,180);">莫比乌斯反演', '41,73,180);">组合数学', '41,73,180);">排列组合', '41,73,180);">前缀和', '41,73,180);">二项式定理', '41,73,180);">康托展开', '41,73,180);">袋与球问题', '41,73,180);">鸽笼', '41,73,180);">容斥', '41,73,180);">斐波那契,Fibonacci', '41,73,180);">卡特兰,Catalan', '41,73,180);">Stirling', '41,73,180);">A*算法', '41,73,180);">生成函数', '41,73,180);">线性规划', '41,73,180);">概率论,统计', '38,38,38);">简单概率', '41,73,180);">条件概率', '38,38,38);">Bayes', '41,73,180);">期望', '41,73,180);">线性代数', '41,73,180);">矩阵乘法', '41,73,180);">线性递推,递推式', '41,73,180);">高斯消元', '41,73,180);">异或方程组', '41,73,180);">逆元', '41,73,180);">线性基', '41,73,180);">微积分初步', '41,73,180);">极限', '41,73,180);">导数', '41,73,180);">积分', '41,73,180);">定积分', '41,73,180);">立体解析几何', '41,73,180);">级数', '38,38,38);">基本数组', '41,73,180);">向量', '41,73,180);">栈', '41,73,180);">队列', '41,73,180);">块状链表,块状数组,分块', '41,73,180);">st表,稀疏表', '41,73,180);">凸包', '41,73,180);">叉积', '41,73,180);">线段相交', '41,73,180);">点积', '41,73,180);">半平面交', '41,73,180);">最近点对', '41,73,180);">凸多边形的交', '41,73,180);">离散化扫描', '41,73,180);">旋转卡壳', '41,73,180);">字典树,Trie树', '41,73,180);">AC自动机', '41,73,180);">KMP', '41,73,180);">后缀数组,SA', '41,73,180);">后缀树', '41,73,180);">有限状态自动机', '41,73,180);">哈夫曼,Huffman', '38,38,38);">简单密码学', '41,73,180);">其它技巧', '41,73,180);">随机贪心,随机化', '41,73,180);">Nim游戏', '41,73,180);">博弈树', '41,73,180);">Shannon开关游戏', '41,73,180);">快速傅里叶变换FFT', '41,73,180);">位运算,按位', '', '41,73,180);">整体二分', '', '41,73,180);">构造', '', '41,73,180);">环套树', '41,73,180);">K-DTree', '41,73,180);">Lucas定理', '41,73,180);">插头dp', '41,73,180);">快速数论变换NTT', '41,73,180);">回文自动机PAM', '41,73,180);">快速沃尔什变换FWT', '41,73,180);">快速莫比乌斯变换FMT', '82,196,26);">天津', '41,73,180);">Manacher算法', '41,73,180);">差分', '19,194,194);">清华集训', '19,194,194);">网络流24题', '19,194,194);">COCI', '19,194,194);">BalticOI', '19,194,194);">ACM_ICPC', '19,194,194);">JOI', '19,194,194);">洛谷月赛', '52,152,219);">2026', '52,152,219);">2027', '52,152,219);">2028', '52,152,219);">2077', '19,194,194);">CSPS提高级', '19,194,194);">CSPJ入门级', '52,152,219);">1996', '41,73,180);">双指针,尺取法,two-pointer', '19,194,194);">AGM', '19,194,194);">NOIOnline', '19,194,194);">Ynoi']
